//// https://www.youtube.com/watch?v=x-EZy6gu_38&t=679s
//// 20) Напишите функцию, которая проверит строку на сбалансированность скобок {}. (), [] вернуть true если они сбалансированы, иначе false
// метод pop удаляет последний элемент и возвращает его
// Цикл for...of используется для итерации по значениям коллекции (например, массивов, строк, объектов типа Map, Set и т.д.).
// Цикл for...in используется для итерации по ключам/индексам объекта. Это полезно, когда нужно перебрать свойства объекта или индексы массива.
// будь внимателен к моменту, когда элемент добавился в массив, а когда он ещё не добавился, но с ним выполняются определённые действия 




// console.log(isBalanced('({}x + y) - (4)'));
// console.log(isBalanced('((x + y) - (4)'));
































// // Проверка строки '(50)(' - ожидаемый результат: false (скобки не сбалансированы)
// console.log(isBalanced('(50)('));

// // // Проверка строки '[{]}' - ожидаемый результат: false (скобки не сбалансированы)
// console.log(isBalanced('[{]}'));

// // // Проверка строки '()[]{' - ожидаемый результат: false (скобки не сбалансированы)
// console.log(isBalanced('(){'));


















// function isBalanced(string) {
// 	const start = '({['
// 	const end = ')}]'

// 	const map = {
// 		'{': '}',
// 		'(': ')',
// 		'[': ']'
// 	}

// 	const array = [] // (
// 	for (let el of string) {
// 		if(start.includes(el))	{
// 			array.push(el)
// 		} else {
// 			if(end.includes(el)) {
// 				const last = array.pop()
// 				if(map[last] !== el) {
// 					return false
// 				}
// 			}
// 		}
// 	}
// 	return !array.length
// }



// function isBalanced(string) {
//   // Определяем строку 'start', которая содержит открывающие скобки: '{', '[', '('
//   const start = '{[('
//   // Определяем строку 'end', которая содержит закрывающие скобки: '}', ']', ')'
//   const end = '}])'

//   // Создаем объект 'map', который сопоставляет каждую закрывающую скобку с соответствующей открывающей
//   const map = {
//     '}': '{',
//     ']': '[',
//     ')': '('
//   }

//   // Создаем пустой массив 'queue', который будет использоваться как стек для отслеживания открывающих скобок
//   const queue = [];

//   // Проходим по каждому символу в строке 'string'
//   for(let i = 0; i < string.length; i++) {
//     const char = string[i];  // Получаем текущий символ
//     // Если текущий символ является открывающей скобкой
//     if(start.includes(char)) {
//       // Добавляем его в стек (массив 'queue')
//       queue.push(char)
//     }
//     // Если текущий символ является закрывающей скобкой
//     else if(end.includes(char)) {
//       // Удаляем последний добавленный элемент из стека и сохраняем его в переменную 'last'
//       const last = queue.pop()
//       // Проверяем, соответствует ли закрывающая скобка той открывающей, которая должна быть последней
//       // Если не соответствует, возвращаем false (строка не сбалансирована)
//       if(map[char] !== last) {
//         return false
//       }
//     }
//   }
//   // Если стек пустой после обработки всей строки, возвращаем true (скобки сбалансированы)
//   // Если стек не пуст, возвращаем false (скобки не сбалансированы)
//   return !queue.length;
// }

// // Примеры использования функции:

